import { Component, EventEmitter, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/reporter.service";
import * as i2 from "@angular/common";
export class ImgUploaderComponent {
    constructor(reporterService) {
        this.reporterService = reporterService;
        this.uploadedChange = new EventEmitter();
        this.uploadedFiles = [];
        this.uploading = false;
    }
    ngOnInit() {
    }
    /*UPLOAD FILES*/
    delFile(file) {
        this.uploadedFiles = this.uploadedFiles.filter((x) => x != file);
        this.notifyChange();
    }
    notifyChange() {
        const layers = [];
        this.uploadedFiles.forEach(itm => layers.push(itm.layer));
        this.uploadedChange.emit(layers);
    }
    onFileChange(event) {
        const reader = new FileReader();
        if (event.target.files && event.target.files.length > 0) {
            this.uploading = true;
            reader.readAsDataURL(event.target.files[0]);
            reader.onload = () => {
                const image = { id: this.uploadedFiles.length, name: event.target.files[0].name, src: reader.result, layer: {} };
                this.reporterService.uploadImage(event.target.files[0], image.name).subscribe(data => {
                    image.layer = data;
                    this.uploadedFiles.push(image);
                    this.notifyChange();
                }, error => {
                    console.error(error);
                    this.uploading = false;
                });
            };
        }
    }
}
ImgUploaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ImgUploaderComponent, deps: [{ token: i1.ReporterService }], target: i0.ɵɵFactoryTarget.Component });
ImgUploaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: ImgUploaderComponent, selector: "reporter-img-uploader", outputs: { uploadedChange: "uploadedChange" }, ngImport: i0, template: "<h3>Immagini</h3>\n<!--file uploaded-->\n<div class=\"file-wrapper uploaded\" *ngFor=\"let file of uploadedFiles\">\n  <div class=\"preview\" [style.background-image]=\"'URL('+file.src+')'\"></div>\n  <div class=\"title\">\n    <a [href]=\"file.src\" target=\"_blank\">{{file.title}}</a>\n    <span class=\"del-btn ms-2 fas fa-trash-alt\" (click)=\"delFile(file)\"></span>\n  </div>\n</div>\n\n<!--upload-->\n<div class=\"file-wrapper upload\">\n  <input type=\"file\" (change)=\"onFileChange($event)\">\n</div>\n", styles: [".file-wrapper{width:100%;height:48px;border-radius:8px;margin-bottom:1.34375em}.file-wrapper.upload{border:dashed 2px #9e9e9e;display:flex;align-items:center;justify-content:center}.file-wrapper.uploaded{background-color:#fff;display:flex;align-items:center;overflow:hidden;height:52px}.file-wrapper.uploaded .preview{width:60px;background-color:#4d92eb;background-size:cover;height:100%}.file-wrapper.uploaded .title{padding:0 8px}.file-wrapper.uploaded .title .del-btn{cursor:pointer;color:gray}.file-wrapper.uploaded .title .del-btn:hover{color:#2f4f4f}\n"], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ImgUploaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'reporter-img-uploader', template: "<h3>Immagini</h3>\n<!--file uploaded-->\n<div class=\"file-wrapper uploaded\" *ngFor=\"let file of uploadedFiles\">\n  <div class=\"preview\" [style.background-image]=\"'URL('+file.src+')'\"></div>\n  <div class=\"title\">\n    <a [href]=\"file.src\" target=\"_blank\">{{file.title}}</a>\n    <span class=\"del-btn ms-2 fas fa-trash-alt\" (click)=\"delFile(file)\"></span>\n  </div>\n</div>\n\n<!--upload-->\n<div class=\"file-wrapper upload\">\n  <input type=\"file\" (change)=\"onFileChange($event)\">\n</div>\n", styles: [".file-wrapper{width:100%;height:48px;border-radius:8px;margin-bottom:1.34375em}.file-wrapper.upload{border:dashed 2px #9e9e9e;display:flex;align-items:center;justify-content:center}.file-wrapper.uploaded{background-color:#fff;display:flex;align-items:center;overflow:hidden;height:52px}.file-wrapper.uploaded .preview{width:60px;background-color:#4d92eb;background-size:cover;height:100%}.file-wrapper.uploaded .title{padding:0 8px}.file-wrapper.uploaded .title .del-btn{cursor:pointer;color:gray}.file-wrapper.uploaded .title .del-btn:hover{color:#2f4f4f}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ReporterService }]; }, propDecorators: { uploadedChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1nLXVwbG9hZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NpbWEvcmVwb3J0ZXIvc3JjL2xpYi9jb21wb25lbnRzL2ltZy11cGxvYWRlci9pbWctdXBsb2FkZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2ltYS9yZXBvcnRlci9zcmMvbGliL2NvbXBvbmVudHMvaW1nLXVwbG9hZGVyL2ltZy11cGxvYWRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFXeEUsTUFBTSxPQUFPLG9CQUFvQjtJQU8vQixZQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFOMUMsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBR2hELGtCQUFhLEdBQVEsRUFBRSxDQUFDO1FBQ3hCLGNBQVMsR0FBVSxLQUFLLENBQUM7SUFFd0IsQ0FBQztJQUV6RCxRQUFRO0lBQ1IsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixPQUFPLENBQUMsSUFBUTtRQUNkLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQTtRQUNyRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLFlBQVk7UUFDbEIsTUFBTSxNQUFNLEdBQVUsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQVU7UUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUVoQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO2dCQUNuQixNQUFNLEtBQUssR0FBRyxFQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBZ0IsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFDLENBQUE7Z0JBRXZILElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQzFFLElBQUksQ0FBQyxFQUFFO29CQUNILEtBQUssQ0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDO29CQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO2dCQUN2QixDQUFDLEVBQ0QsS0FBSyxDQUFDLEVBQUU7b0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDckIsSUFBSSxDQUFDLFNBQVMsR0FBQyxLQUFLLENBQUM7Z0JBQ3ZCLENBQUMsQ0FDRixDQUFBO1lBQ0gsQ0FBQyxDQUFBO1NBQ0Y7SUFDSCxDQUFDOztrSEE5Q1Usb0JBQW9CO3NHQUFwQixvQkFBb0IsNEdDWGpDLG1nQkFjQTs0RkRIYSxvQkFBb0I7a0JBTGhDLFNBQVM7K0JBQ0UsdUJBQXVCO3NHQUt2QixjQUFjO3NCQUF2QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtGYWtlRGF0YVNlcnZpY2V9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9mYWtlLWRhdGEuc2VydmljZVwiO1xuaW1wb3J0IHsgUmVwb3J0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcmVwb3J0ZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3JlcG9ydGVyLWltZy11cGxvYWRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbWctdXBsb2FkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9pbWctdXBsb2FkZXIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBJbWdVcGxvYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBPdXRwdXQoKSB1cGxvYWRlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8TGF5ZXJbXT4oKTtcbiAgXG4gIFxuICBwdWJsaWMgdXBsb2FkZWRGaWxlczogYW55W109W107XG4gIHB1YmxpYyB1cGxvYWRpbmc6IGJvb2xlYW49ZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZXBvcnRlclNlcnZpY2U6IFJlcG9ydGVyU2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gIH1cblxuICAvKlVQTE9BRCBGSUxFUyovXG4gIGRlbEZpbGUoZmlsZTphbnkpe1xuICAgIHRoaXMudXBsb2FkZWRGaWxlcyA9IHRoaXMudXBsb2FkZWRGaWxlcy5maWx0ZXIoKHg6IGFueSkgPT4geCAhPSBmaWxlKVxuICAgIHRoaXMubm90aWZ5Q2hhbmdlKCk7XG4gIH1cblxuICBwcml2YXRlIG5vdGlmeUNoYW5nZSgpe1xuICAgIGNvbnN0IGxheWVyczogTGF5ZXJbXT1bXTtcbiAgICB0aGlzLnVwbG9hZGVkRmlsZXMuZm9yRWFjaChpdG0gPT4gbGF5ZXJzLnB1c2goaXRtLmxheWVyKSk7XG4gICAgdGhpcy51cGxvYWRlZENoYW5nZS5lbWl0KGxheWVycyk7XG4gIH1cblxuICBwdWJsaWMgb25GaWxlQ2hhbmdlKGV2ZW50OiBhbnkpIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgaWYgKGV2ZW50LnRhcmdldC5maWxlcyAmJiBldmVudC50YXJnZXQuZmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy51cGxvYWRpbmcgPSB0cnVlO1xuICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZXZlbnQudGFyZ2V0LmZpbGVzWzBdKTtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGltYWdlID0ge2lkOiB0aGlzLnVwbG9hZGVkRmlsZXMubGVuZ3RoLG5hbWU6IGV2ZW50LnRhcmdldC5maWxlc1swXS5uYW1lLCBzcmM6IHJlYWRlci5yZXN1bHQgYXMgc3RyaW5nLCBsYXllcjoge319XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJlcG9ydGVyU2VydmljZS51cGxvYWRJbWFnZShldmVudC50YXJnZXQuZmlsZXNbMF0saW1hZ2UubmFtZSkuc3Vic2NyaWJlKFxuICAgICAgICAgIGRhdGEgPT4ge1xuICAgICAgICAgICAgICBpbWFnZS5sYXllcj1kYXRhO1xuICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVkRmlsZXMucHVzaChpbWFnZSk7XG4gICAgICAgICAgICAgIHRoaXMubm90aWZ5Q2hhbmdlKClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy51cGxvYWRpbmc9ZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCI8aDM+SW1tYWdpbmk8L2gzPlxuPCEtLWZpbGUgdXBsb2FkZWQtLT5cbjxkaXYgY2xhc3M9XCJmaWxlLXdyYXBwZXIgdXBsb2FkZWRcIiAqbmdGb3I9XCJsZXQgZmlsZSBvZiB1cGxvYWRlZEZpbGVzXCI+XG4gIDxkaXYgY2xhc3M9XCJwcmV2aWV3XCIgW3N0eWxlLmJhY2tncm91bmQtaW1hZ2VdPVwiJ1VSTCgnK2ZpbGUuc3JjKycpJ1wiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cbiAgICA8YSBbaHJlZl09XCJmaWxlLnNyY1wiIHRhcmdldD1cIl9ibGFua1wiPnt7ZmlsZS50aXRsZX19PC9hPlxuICAgIDxzcGFuIGNsYXNzPVwiZGVsLWJ0biBtcy0yIGZhcyBmYS10cmFzaC1hbHRcIiAoY2xpY2spPVwiZGVsRmlsZShmaWxlKVwiPjwvc3Bhbj5cbiAgPC9kaXY+XG48L2Rpdj5cblxuPCEtLXVwbG9hZC0tPlxuPGRpdiBjbGFzcz1cImZpbGUtd3JhcHBlciB1cGxvYWRcIj5cbiAgPGlucHV0IHR5cGU9XCJmaWxlXCIgKGNoYW5nZSk9XCJvbkZpbGVDaGFuZ2UoJGV2ZW50KVwiPlxuPC9kaXY+XG4iXX0=