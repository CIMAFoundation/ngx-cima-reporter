import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/reporter.service";
import * as i2 from "@cima/commons";
import * as i3 from "@angular/material/slide-toggle";
import * as i4 from "@angular/material/form-field";
import * as i5 from "../print-layout/print-layout.component";
import * as i6 from "@angular/material/select";
import * as i7 from "@angular/material/core";
import * as i8 from "@angular/material/button";
import * as i9 from "../img-uploader/img-uploader.component";
import * as i10 from "@angular/forms";
import * as i11 from "@angular/common";
import * as i12 from "@angular/material/input";
export class ExpectedSituationComponent {
    constructor(reporterService, snackBar) {
        this.reporterService = reporterService;
        this.snackBar = snackBar;
        this.forecastReportChange = new EventEmitter();
        this.sectionEnabled = false;
        this.textExpected = '<span>Situazione prevista...</span>';
        this.config = { height: '200px', placeholder: 'Situazione prevista...' };
        this.rainMapDatas = [];
        this.snowMapDatas = [];
        this.geoMapDatas = [];
        this.uploadedImageLayers = [];
        /*PREC RUN*/
        this.runsPrec = [
            {
                id: 0,
                run: ''
            }
        ];
        /*SNOW RUN*/
        this.runsSnow = [
            {
                id: 0,
                run: ''
            }
        ];
        /*GEOPOT RUN*/
        this.runsGeoPot = [
            {
                id: 0,
                run: ''
            }
        ];
    }
    addRunPrec() {
        this.runsPrec = [...this.runsPrec, { id: 1, run: '' }];
    }
    delRunPrec(item) {
        this.runsPrec = this.runsPrec.filter((x) => x != item);
    }
    addRunSnow() {
        this.runsSnow = [...this.runsSnow, { id: 1, run: '' }];
    }
    delRunSnow(item) {
        this.runsSnow = this.runsSnow.filter((x) => x != item);
    }
    addRunGeoPot() {
        this.runsGeoPot = [...this.runsGeoPot, { id: 1, run: '' }];
    }
    delRunGeoPot(item) {
        this.runsGeoPot =
            this.runsGeoPot.filter((x) => x != item);
    }
    uploadedImageChange(event) {
        console.log(event);
        this.uploadedImageLayers = event;
        this.updateLayers();
    }
    updateLayers() {
        this.forecastReport.layers = [];
        this.runsPrec.forEach(itm => { if (itm.data)
            this.forecastReport.layers.push(itm.data); });
        this.runsSnow.forEach(itm => { if (itm.data)
            this.forecastReport.layers.push(itm.data); });
        this.runsGeoPot.forEach(itm => { if (itm.data)
            this.forecastReport.layers.push(itm.data); });
        this.uploadedImageLayers.forEach(itm => this.forecastReport.layers.push(itm));
        console.log('layers', this.forecastReport.layers);
    }
    dateUpdate() {
        if (this.dateFrom)
            this.forecastReport.fromUTCSecond = Math.trunc(new Date(this.dateFrom).getTime() / 1000);
        if (this.dateTo)
            this.forecastReport.toUTCSecond = Math.trunc(new Date(this.dateTo).getTime() / 1000);
        //this.loadStations();
        this.loadForecastDatasAvailability();
    }
    layoutChange(layout) {
        if (this.forecastReport)
            this.forecastReport.nImgs = layout.numberOfImages;
        console.log('report', this.forecastReport);
    }
    selectMap(type, event, prec) {
        console.log('selected', event, prec);
        //TODO
        this.reporterService.getForecastData(type, event).subscribe(data => {
            console.log(data);
            prec.data = data;
            this.updateLayers();
        }, error => {
            console.error(error);
            this.snackBar.error("Errore durante il caricamento della mappa di previsione.", '', { duration: 2000 });
        });
    }
    loadAvailability(dataType, listData) {
        listData.splice(0, listData.length);
        this.reporterService.getForecastDatasAvailability(dataType, this.forecastReport.fromUTCSecond, this.forecastReport.toUTCSecond).subscribe(data => {
            listData.push(...data.runs);
        }, error => {
            console.error(error);
            this.snackBar.error('Si è verificato un errore durante la lettura dei dati.', '', { duration: 2000 });
        });
    }
    loadForecastDatasAvailability() {
        //todo cancellare vecchi layers
        if (this.forecastReport.fromUTCSecond > 0 && this.forecastReport.toUTCSecond > 0) {
            this.loadAvailability('ITALIA_PT', this.rainMapDatas);
            this.loadAvailability('ITALIA_NT', this.snowMapDatas);
            this.loadAvailability('EURATL_GGTT', this.geoMapDatas);
        }
    }
    enableReport() {
        if (this.sectionEnabled) {
            this.forecastReport = {
                fromUTCSecond: 0,
                toUTCSecond: 0,
                text: '',
                title: '',
                nImgs: 1,
                raings_title: 'Pluviometri',
                hydros_title: 'Idrometri',
                layers: [], //todo
            };
            this.updateLayers();
            this.dateUpdate();
            this.forecastReportChange.emit(this.forecastReport);
        }
        else {
            this.forecastReport = undefined;
        }
    }
    ngOnInit() {
        this.enableReport();
    }
}
ExpectedSituationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ExpectedSituationComponent, deps: [{ token: i1.ReporterService }, { token: i2.SnackbarService }], target: i0.ɵɵFactoryTarget.Component });
ExpectedSituationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: ExpectedSituationComponent, selector: "reporter-expected-situation", inputs: { forecastReport: "forecastReport" }, outputs: { forecastReportChange: "forecastReportChange" }, ngImport: i0, template: "<!--abilitazione-->\n<mat-slide-toggle\n  class=\"\"\n  color=primary [(ngModel)]=\"sectionEnabled\" (change)=\"enableReport()\">\n  Includi Situazione Prevista\n</mat-slide-toggle>\n\n\n<div class=\"section-wrapper\" [ngClass]=\"!sectionEnabled?'section-disabled':''\">\n  <!--mappa-->\n  <div class=\"col-12 my-2\">\n    <!--periodo di analisi-->\n    <h2 class=\"border-bottom mb-3 mt-3\">Periodo di Analisi</h2>\n\n    <mat-form-field appearance=\"fill\" class=\"me-2\">\n      <mat-label>da</mat-label>\n      <input matInput type=\"datetime-local\" placeholder=\"data da\" [(ngModel)]= \"dateFrom\" (change)=\"dateUpdate()\">\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\" class=\"me-2\">\n      <mat-label>a</mat-label>\n      <input matInput type=\"datetime-local\" placeholder=\"data a\" [(ngModel)]= \"dateTo\" (change)=\"dateUpdate()\">\n    </mat-form-field>\n\n    <!-- <button mat-flat-button color=\"primary\"><span class=\"fas fa-clock me-1\"></span>Now</button> -->\n\n  </div>\n\n  <!--testo situazione pregressa-->\n  <div class=\"col-12 my-2\">\n    <cima-text-editor [(text)]=\"textExpected\" [config]=\"config\"></cima-text-editor>\n  </div>\n\n  <!--layout stampa-->\n  <div class=\"col-12 my-2\">\n    <reporter-print-layout  (selected)=\"layoutChange($event)\"></reporter-print-layout>\n  </div>\n\n  <!--layer-->\n  <div class=\"col-12 my-2\">\n    <h2 class=\"border-bottom mb-3 mt-3\">Layers</h2>\n    <div class=\"row\">\n\n      <!--PRECIPITAZIONI-->\n      <div class=\"col-12 col-lg-6 col-xl-3 mb-2\">\n        <div class=\"col-wrapper p-3\">\n          <h3>Previsione Precipitazione cum. 6h</h3>\n          <div class=\"runPrec\" *ngFor=\"let prec of runsPrec, let i = index\">\n\n            <div class=\"item-list-big-bull bg-secondary\">\n              <span>{{i+1}}</span>\n            </div>\n\n            <mat-form-field appearance=\"fill\" class=\"w-100\">\n              <mat-label>Seleziona run</mat-label>\n              <mat-select (valueChange)=\"selectMap('ITALIA_PT',$event, prec)\">\n                <mat-option *ngFor=\"let run of rainMapDatas\"  [value]=\"run\">\n                  {{run.descr}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <div class=\"del-btn-wrapper ms-2\">\n              <span class=\"del-btn fas fa-trash-alt\" *ngIf=\"i>0\" (click)=\"delRunPrec(prec)\"></span>\n            </div>\n\n          </div>\n\n          <button mat-flat-button color=\"primary\" class=\"bg-success\" (click)=\"addRunPrec()\"><span class=\"fas fa-plus me-1\"></span>Aggiungi Run Precipitazioni</button>\n\n        </div>\n      </div>\n\n      <!--NEVE-->\n      <div class=\"col-12 col-lg-6 col-xl-3 mb-2\">\n        <div class=\"col-wrapper p-3\">\n          <h3>Previsione Neve cum. 6h</h3>\n          <div class=\"runPrec\" *ngFor=\"let snow of runsSnow, let i = index\">\n\n            <div class=\"item-list-big-bull bg-secondary\">\n              <span>{{i+1}}</span>\n            </div>\n\n            <mat-form-field appearance=\"fill\" class=\"w-100\">\n              <mat-label>Seleziona run</mat-label>\n              <mat-select (valueChange)=\"selectMap('ITALIA_NT',$event, snow)\">\n                <mat-option *ngFor=\"let run of snowMapDatas\" [value]=\"run\">\n                  {{run.descr}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <div class=\"del-btn-wrapper ms-2\">\n              <span class=\"del-btn fas fa-trash-alt\" *ngIf=\"i>0\" (click)=\"delRunSnow(snow)\"></span>\n            </div>\n\n          </div>\n\n          <button mat-flat-button color=\"primary\" class=\"bg-success\" (click)=\"addRunSnow()\"><span class=\"fas fa-plus me-1\"></span>Aggiungi Run Neve</button>\n\n        </div>\n      </div>\n\n      <!--GEOPOTENZIALI-->\n      <div class=\"col-12 col-lg-6 col-xl-3 mb-2\">\n        <div class=\"col-wrapper p-3\">\n          <h3>Previsione Geopotenziale cum. 6h  (500hpa)</h3>\n          <div class=\"runPrec\" *ngFor=\"let geo of runsGeoPot, let i = index\">\n\n            <div class=\"item-list-big-bull bg-secondary\">\n              <span>{{i+1}}</span>\n            </div>\n\n            <mat-form-field appearance=\"fill\" class=\"w-100\">\n              <mat-label>Seleziona run</mat-label>\n              <mat-select (valueChange)=\"selectMap('EURATL_GGTT',$event, geo)\">\n                <mat-option *ngFor=\"let run of geoMapDatas\" [value]=\"run\">\n                  {{run.descr}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <div class=\"del-btn-wrapper ms-2\">\n              <span class=\"del-btn fas fa-trash-alt\" *ngIf=\"i>0\" (click)=\"delRunGeoPot(geo)\"></span>\n            </div>\n\n          </div>\n\n          <button mat-flat-button color=\"primary\" class=\"bg-success\" (click)=\"addRunGeoPot()\"><span class=\"fas fa-plus me-1\"></span>Aggiungi Run Geopotenziale</button>\n\n        </div>\n      </div>\n\n      <div class=\"col-12 col-lg-6 col-xl-3 mb-2\">\n        <div class=\"col-wrapper p-3\">\n          <reporter-img-uploader (uploadedChange)=\"uploadedImageChange($event)\"></reporter-img-uploader>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n</div>\n", styles: [".section-disabled{opacity:.3;pointer-events:none}.col-wrapper{background-color:#f5f5f5;border-radius:4px}:host ::ng-deep .col-wrapper .mat-form-field-infix{width:auto!important}.runPrec{display:flex}.item-list-big-bull{min-width:25px;min-height:25px;max-width:25px;max-height:25px;border-radius:50%;background-color:#0266cc;color:#fff;display:flex;justify-content:center;align-items:center;font-size:1.2em;font-weight:600;margin-right:8px;margin-top:14px}.del-btn-wrapper{padding-top:16px;width:25px}.del-btn-wrapper .del-btn{cursor:pointer;color:gray}.del-btn-wrapper .del-btn:hover{color:#2f4f4f}\n"], components: [{ type: i3.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "checked"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i4.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i2.TextEditorComponent, selector: "cima-text-editor", inputs: ["validator", "text", "config"], outputs: ["textChange"] }, { type: i5.PrintLayoutComponent, selector: "reporter-print-layout", outputs: ["selected"] }, { type: i6.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i7.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i8.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i9.ImgUploaderComponent, selector: "reporter-img-uploader", outputs: ["uploadedChange"] }], directives: [{ type: i10.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i10.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i11.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.MatLabel, selector: "mat-label" }, { type: i12.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i10.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ExpectedSituationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'reporter-expected-situation', template: "<!--abilitazione-->\n<mat-slide-toggle\n  class=\"\"\n  color=primary [(ngModel)]=\"sectionEnabled\" (change)=\"enableReport()\">\n  Includi Situazione Prevista\n</mat-slide-toggle>\n\n\n<div class=\"section-wrapper\" [ngClass]=\"!sectionEnabled?'section-disabled':''\">\n  <!--mappa-->\n  <div class=\"col-12 my-2\">\n    <!--periodo di analisi-->\n    <h2 class=\"border-bottom mb-3 mt-3\">Periodo di Analisi</h2>\n\n    <mat-form-field appearance=\"fill\" class=\"me-2\">\n      <mat-label>da</mat-label>\n      <input matInput type=\"datetime-local\" placeholder=\"data da\" [(ngModel)]= \"dateFrom\" (change)=\"dateUpdate()\">\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\" class=\"me-2\">\n      <mat-label>a</mat-label>\n      <input matInput type=\"datetime-local\" placeholder=\"data a\" [(ngModel)]= \"dateTo\" (change)=\"dateUpdate()\">\n    </mat-form-field>\n\n    <!-- <button mat-flat-button color=\"primary\"><span class=\"fas fa-clock me-1\"></span>Now</button> -->\n\n  </div>\n\n  <!--testo situazione pregressa-->\n  <div class=\"col-12 my-2\">\n    <cima-text-editor [(text)]=\"textExpected\" [config]=\"config\"></cima-text-editor>\n  </div>\n\n  <!--layout stampa-->\n  <div class=\"col-12 my-2\">\n    <reporter-print-layout  (selected)=\"layoutChange($event)\"></reporter-print-layout>\n  </div>\n\n  <!--layer-->\n  <div class=\"col-12 my-2\">\n    <h2 class=\"border-bottom mb-3 mt-3\">Layers</h2>\n    <div class=\"row\">\n\n      <!--PRECIPITAZIONI-->\n      <div class=\"col-12 col-lg-6 col-xl-3 mb-2\">\n        <div class=\"col-wrapper p-3\">\n          <h3>Previsione Precipitazione cum. 6h</h3>\n          <div class=\"runPrec\" *ngFor=\"let prec of runsPrec, let i = index\">\n\n            <div class=\"item-list-big-bull bg-secondary\">\n              <span>{{i+1}}</span>\n            </div>\n\n            <mat-form-field appearance=\"fill\" class=\"w-100\">\n              <mat-label>Seleziona run</mat-label>\n              <mat-select (valueChange)=\"selectMap('ITALIA_PT',$event, prec)\">\n                <mat-option *ngFor=\"let run of rainMapDatas\"  [value]=\"run\">\n                  {{run.descr}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <div class=\"del-btn-wrapper ms-2\">\n              <span class=\"del-btn fas fa-trash-alt\" *ngIf=\"i>0\" (click)=\"delRunPrec(prec)\"></span>\n            </div>\n\n          </div>\n\n          <button mat-flat-button color=\"primary\" class=\"bg-success\" (click)=\"addRunPrec()\"><span class=\"fas fa-plus me-1\"></span>Aggiungi Run Precipitazioni</button>\n\n        </div>\n      </div>\n\n      <!--NEVE-->\n      <div class=\"col-12 col-lg-6 col-xl-3 mb-2\">\n        <div class=\"col-wrapper p-3\">\n          <h3>Previsione Neve cum. 6h</h3>\n          <div class=\"runPrec\" *ngFor=\"let snow of runsSnow, let i = index\">\n\n            <div class=\"item-list-big-bull bg-secondary\">\n              <span>{{i+1}}</span>\n            </div>\n\n            <mat-form-field appearance=\"fill\" class=\"w-100\">\n              <mat-label>Seleziona run</mat-label>\n              <mat-select (valueChange)=\"selectMap('ITALIA_NT',$event, snow)\">\n                <mat-option *ngFor=\"let run of snowMapDatas\" [value]=\"run\">\n                  {{run.descr}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <div class=\"del-btn-wrapper ms-2\">\n              <span class=\"del-btn fas fa-trash-alt\" *ngIf=\"i>0\" (click)=\"delRunSnow(snow)\"></span>\n            </div>\n\n          </div>\n\n          <button mat-flat-button color=\"primary\" class=\"bg-success\" (click)=\"addRunSnow()\"><span class=\"fas fa-plus me-1\"></span>Aggiungi Run Neve</button>\n\n        </div>\n      </div>\n\n      <!--GEOPOTENZIALI-->\n      <div class=\"col-12 col-lg-6 col-xl-3 mb-2\">\n        <div class=\"col-wrapper p-3\">\n          <h3>Previsione Geopotenziale cum. 6h  (500hpa)</h3>\n          <div class=\"runPrec\" *ngFor=\"let geo of runsGeoPot, let i = index\">\n\n            <div class=\"item-list-big-bull bg-secondary\">\n              <span>{{i+1}}</span>\n            </div>\n\n            <mat-form-field appearance=\"fill\" class=\"w-100\">\n              <mat-label>Seleziona run</mat-label>\n              <mat-select (valueChange)=\"selectMap('EURATL_GGTT',$event, geo)\">\n                <mat-option *ngFor=\"let run of geoMapDatas\" [value]=\"run\">\n                  {{run.descr}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <div class=\"del-btn-wrapper ms-2\">\n              <span class=\"del-btn fas fa-trash-alt\" *ngIf=\"i>0\" (click)=\"delRunGeoPot(geo)\"></span>\n            </div>\n\n          </div>\n\n          <button mat-flat-button color=\"primary\" class=\"bg-success\" (click)=\"addRunGeoPot()\"><span class=\"fas fa-plus me-1\"></span>Aggiungi Run Geopotenziale</button>\n\n        </div>\n      </div>\n\n      <div class=\"col-12 col-lg-6 col-xl-3 mb-2\">\n        <div class=\"col-wrapper p-3\">\n          <reporter-img-uploader (uploadedChange)=\"uploadedImageChange($event)\"></reporter-img-uploader>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n</div>\n", styles: [".section-disabled{opacity:.3;pointer-events:none}.col-wrapper{background-color:#f5f5f5;border-radius:4px}:host ::ng-deep .col-wrapper .mat-form-field-infix{width:auto!important}.runPrec{display:flex}.item-list-big-bull{min-width:25px;min-height:25px;max-width:25px;max-height:25px;border-radius:50%;background-color:#0266cc;color:#fff;display:flex;justify-content:center;align-items:center;font-size:1.2em;font-weight:600;margin-right:8px;margin-top:14px}.del-btn-wrapper{padding-top:16px;width:25px}.del-btn-wrapper .del-btn{cursor:pointer;color:gray}.del-btn-wrapper .del-btn:hover{color:#2f4f4f}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ReporterService }, { type: i2.SnackbarService }]; }, propDecorators: { forecastReport: [{
                type: Input
            }], forecastReportChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,